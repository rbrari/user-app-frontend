@mixin scrollbar-on-hover(
  $width: 0.6rem,
  $track: var(--scrollbar-bg),
  $thumb: var(--scrollbar-thumb-bg)
) {
  @include small-scrollbar($width, transparent, transparent);

  &::-webkit-scrollbar {
    visibility: hidden;
  }

  &:hover {
    @include small-scrollbar($width, $track, $thumb);
  }
}

// Scrollbar with custom width, track and thumb color
@mixin small-scrollbar(
  $width: 0.6rem,
  $track: var(--scrollbar-bg),
  $thumb: var(--scrollbar-thumb-bg)
) {
  /* Scrollbar width */
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }

  /* Scrollbar Track */
  &::-webkit-scrollbar-track {
    background-color: $track;
  }

  /* Scrollbar Handle */
  &::-webkit-scrollbar-thumb {
    background-color: $thumb;
    border-radius: 20rem;
  }

  /* Scrollbar Handle on hover */
  &::-webkit-scrollbar-thumb:hover {
    background-color: color-mix(in srgb, $thumb, #000 10%);
  }
}

// Make text ellipsis ... with max-width
@mixin text-ellipsis($width: 100%, $lines: 1) {
  white-space: nowrap;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-all;
  hyphens: auto;

  @if $lines > 1 {
    @supports (-webkit-line-clamp: $lines) {
      text-overflow: ellipsis;
      white-space: initial;
      display: -webkit-box;
      -webkit-line-clamp: $lines;
      -webkit-box-orient: vertical;
    }
  }
}

@function is-css-variable($value) {
  @return type-of($value) == 'string' and str-index($value, 'var(') == 1;
}

// Focus Element -- color, spread, type (BORDER | OUTLINE)
@mixin focus-element(
  $color: #4159d0,
  $spread: 0.2rem,
  $type: border,
  $type-width: 0.1rem
) {
  $is-css-variable: is-css-variable($color);

  // Process the colors based on whether they are CSS variables or not
  $box-shadow-color: if($is-css-variable, $color, rgba($color, 0.25));
  $border-outline-color: if($is-css-variable, $color, rgba($color, 0.45));

  @if $spread > 0 {
    box-shadow: 0 0 0 $spread #{$box-shadow-color} !important;
  }

  @if $type == border {
    border: $type-width solid #{$border-outline-color} !important;
  } @else if ($type == outline) {
    outline: $type-width solid #{$border-outline-color} !important;
  }
}

@mixin font(
  $fontSize: false,
  $lineHeight: false,
  $fontWeight: false,
  $fontStyle: false
) {
  @if $fontSize {
    font-size: $fontSize;
  }
  @if $lineHeight {
    line-height: $lineHeight;
  }
  @if $fontWeight {
    font-weight: $fontWeight;
  }
  @if $fontStyle {
    font-style: $fontStyle;
  }
}

@mixin flex($direction: false, $justify: false, $align: false) {
  display: flex;

  @if $direction {
    flex-direction: $direction;
  }
  @if $justify {
    justify-content: $justify;
  }
  @if $align {
    align-items: $align;
  }
}

@mixin text-truncate($width: 100%) {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $width;
}

@mixin color-svg($color: currentColor, $type: stroke) {
  svg path,
  svg rect,
  svg circle,
  svg polygon,
  svg ellipse,
  svg line {
    @if $type == fill {
      fill: $color;
    } @else if $type == stroke {
      stroke: $color;
    }
  }
}
